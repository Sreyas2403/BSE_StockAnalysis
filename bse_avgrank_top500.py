# -*- coding: utf-8 -*-
"""BSE_AvgRank_Top500.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lfmxhQCvGH6cJqMZCQ3C9fv9v9-mejYB
"""

import pandas as pd
import yfinance as yf

# Load the xlsx file containing stock symbols
file_path = '/content/Equity.csv'  # Replace with your actual file path
df = pd.read_csv(file_path)

# Fetch SENSEX data for the last 200 trading days
sensex = yf.download("^BSESN", period="6mo", interval="1d")

# Function to fetch stock data for the last 200 trading days
def fetch_stock_data(symbol):
    try:
        # Append '.BO' for BSE stocks
        return yf.download(symbol + ".BO", period="6mo", interval="1d")
    except Exception as e:
        print(f"Error fetching data for {symbol}: {e}")
        return None

# Calculate relative strength and rank for each stock
def calculate_relative_strength(stock_data, sensex_data):
    stock_data['RelativeStrength'] = stock_data['Close'] / sensex_data['Close']
    stock_data['Rank'] = stock_data['RelativeStrength'].rank(ascending=False)
    return stock_data

# Initialize lists to store calculated values for each stock
avg_rank_list = []
top_500_list = []
top_200_list = []
top_100_list = []

# Iterate over each stock symbol in the DataFrame and calculate metrics
for symbol in df['Security Id']:
    print(f"Processing {symbol}...")

    stock_data = fetch_stock_data(symbol)

    # Check if stock data is available, if not, continue to the next stock
    if stock_data is None or stock_data.empty:
        avg_rank_list.append(None)
        top_500_list.append(None)
        top_200_list.append(None)
        top_100_list.append(None)
        continue

    # Align stock data and BSE SENSEX data by date
    stock_data = stock_data.loc[stock_data.index.isin(sensex.index)]
    sensex_data = sensex.loc[sensex.index.isin(stock_data.index)]

    # Calculate relative strength and ranks
    stock_data = calculate_relative_strength(stock_data, sensex_data)

    # Calculate the average rank over 200 days
    avg_rank = stock_data['Rank'].mean()

    # Count how many days the stock was in the top 500, 200, and 100 ranks
    top_500_days = (stock_data['Rank'] <= 500).sum()
    top_200_days = (stock_data['Rank'] <= 200).sum()
    top_100_days = (stock_data['Rank'] <= 100).sum()

    # Append the results to the respective lists
    avg_rank_list.append(avg_rank)
    top_500_list.append(top_500_days)
    top_200_list.append(top_200_days)
    top_100_list.append(top_100_days)

# Add new columns to the original DataFrame
df['AvgRank'] = avg_rank_list
df['Top500Days'] = top_500_list
df['Top200Days'] = top_200_list
df['Top100Days'] = top_100_list

# Save the updated DataFrame to a new CSV file
output_file = 'BSE_AverageRank_Top500rankdays.csv'
df.to_csv(output_file, index=False)

print(f"Updated data saved to {output_file}")